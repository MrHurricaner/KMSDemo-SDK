#ifndef __HEADER_ECDSA_DI_CO_H__
#define	__HEADER_ECDSA_DI_CO_H__

#include "typedef.h"
#include "secp256k1_curve.h"

#ifdef  __cplusplus
extern "C" {
#endif

/*
=======================================================================================================================
	描述:ECDSA两方协同密钥生成流程说明
	-------------------------------------------------------------------------------------------------------------------
				P1															P2
	ECDSA_DiCo_KeyGen_P1_Send()		----------------------->	
									<-----------------------	ECDSA_DiCo_KeyGen_P2_Done()
	ECDSA_DiCo_KeyGen_P1_Recv()									
			(x1,pk,)														(x2,pk)
	备注：
		x1 + x2 = sk
		pk = [sk]G
=======================================================================================================================
*/

	
/*
=======================================================================================================================
	描述:ECDSA两方协同签名――密钥生成算法――第一步
	输入:
		pSys_Para: 系统参数
		pbP1_SK: P1的部分私钥，长度为32字节
		pbRand：计算所需的随机数，长度为32字节
	输出:
		pbMultSK: 乘法器私钥，长度384字节
		pbMultPK: 乘法器公钥，长度128字节
		pbP1_PK:  P1的部分公钥,即椭圆曲线点，长度为64字节
		pbP1_ZK:  P1的零知识证明信息，长度为64字节
	返回：
		0	失败
		1	成功
=======================================================================================================================
*/
S32 ECDSA_DiCo_KeyGen_P1_Send(U8 *pbMultSK, U8 *pbMultPK, U8 *pbP1_PK, U8 *pbP1_ZK, SECP256K1_Sys_Para * pSys_Para,
	U8 *pbP1_SK, U8 *pbRand);

/*
=======================================================================================================================
	描述:ECDSA两方协同签名――密钥生成算法――第二步
	输入:
		pSys_Para: 系统参数
		pbMultPK: 乘法器公钥，长度128字节
		pbP2_SK: P2的部分私钥，长度为32字节
		// pbP2_SK：P2的部分公钥，长度为64字节
		pbP1_PK：P1的部分公钥，长度为64字节
		pbP1_ZK：P1的零知识证明，长度为64字节
	输出:
		pbPubKey: 公钥,即椭圆曲线点，长度为64字节
		pbP2_PK:  P1的部分公钥,即椭圆曲线点，长度为64字节
		pbP2_ZK:  P1的零知识证明信息，长度为64字节
	返回：
		0	失败
		1	成功
=======================================================================================================================
*/
S32 ECDSA_DiCo_KeyGen_P2_Done(U8 *pbPubKey, U8 *pbP2_PK, U8 *pbP2_ZK, SECP256K1_Sys_Para * pSys_Para,
	U8 *pbMultPK, U8 *pbP2_SK, U8 *pbP1_PK, U8 *pbP1_ZK, U8 *pbRand);

/*
=======================================================================================================================
	描述:ECDSA两方协同签名――密钥生成算法――第三步
	输入:
		pSys_Para: 系统参数
		pbMultPK: 乘法器公钥，长度128字节
		pbP1_SK: P2的部分私钥，长度为32字节
	   	pbP1_PK：P2的部分公钥，长度为64字节
		pbP2_PK：P1的部分公钥，长度为64字节
		pbP2_ZK：P1的零知识证明，长度为64字节
	输出:
		pbPubKey: 公钥,即椭圆曲线点，长度为64字节
	返回：
		0	失败
		1	成功
=======================================================================================================================
*/
S32 ECDSA_DiCo_KeyGen_P1_Recv(U8 *pbPubKey, SECP256K1_Sys_Para * pSys_Para,
	U8 *pbMultPK, U8 *pbP1_SK, U8 *pbP1_PK, U8 *pbP2_PK, U8 *pbP2_ZK);

/*
=======================================================================================================================
	描述:ECDSA两方协同签名流程说明
	-------------------------------------------------------------------------------------------------------------------
				P1															P2
	ECDSA_DiCo_Sign_Part1_SetR()	----------------------->	
									<-----------------------	ECDSA_DiCo_Sign_Part1_SetR()
	ECDSA_DiCo_Sign_Part1_GetR()								ECDSA_DiCo_Sign_Part1_GetR()
	ECDSA_DiCo_Sign_Part2_Send()	----------------------->
									<-----------------------	ECDSA_DiCo_Sign_Part2_Mult()
	ECDSA_DiCo_Sign_Part2_Recv()	----------------------->	[negligible send]
	ECDSA_DiCo_Sign_Part2_GetS()								ECDSA_DiCo_Sign_Part2_GetS()
				(r,s)														(r,s)
	备注：
		第5条消息可不发送，此时仅P1需要产生完整签名值
=======================================================================================================================
*/


/*
=======================================================================================================================
	描述:ECDSA两方协同签名――签名算法第一部分（设置随机数）
	输入:
		pSys_Para: 系统参数
		pbBN_k1: 己方的随机数k1，长度为32字节 ? 公钥？
		pbRand： 计算所需的随机数，长度为32字节
	输出:
		pbEC_R1：己方的临时点R1，长度为64字节
		pbZK_P1：己方的零知识证明，长度为64字节
	返回：
		0	失败
		1	成功
=======================================================================================================================
*/
S32 ECDSA_DiCo_Sign_Part1_SetR(U8 *pbEC_R1, U8 *pbZK_P1, SECP256K1_Sys_Para * pSys_Para, U8 *pbBN_k1, U8 *pbRand);

/*
=======================================================================================================================
	描述:ECDSA两方协同签名――签名算法第一部分（获取部分签名r）
	输入:
		pSys_Para: 系统参数
		pbBN_k1: 己方的随机数k1，长度为32字节
		pbEC_R1：己方的临时点R1，长度为64字节
		pbEC_R2：对方的临时点R1，长度为64字节
		pbZK_P2：对方的零知识证明，长度为64字节
	输出:
		pbBN_r：共享的临时点x坐标，长度为32字节
	返回：
		0	失败
		1	成功
=======================================================================================================================
*/
S32 ECDSA_DiCo_Sign_Part1_GetR(U8 *pbBN_r, SECP256K1_Sys_Para * pSys_Para, U8 *pbBN_k1, U8 *pbEC_R1, U8 *pbEC_R2, U8 *pbZK_P2);

/*
=======================================================================================================================
	描述:ECDSA两方协同签名――签名算法第二部分（乘法器触发）
	输入:
		pSys_Para: 系统参数
		pbBN_e:  待签名的杂凑值，长度为32字节
		pbBN_r： 共享的临时点x坐标，长度为32字节
		pbBN_x1：P1的部分私钥，长度为32字节
		pbBN_k1：P1的随机数k1，长度为32字节
		pbBN_p1：P1的随机数p1，长度为32字节
		pbMultPK: 乘法器公钥，长度128字节
		pbRand：计算所需的随机数，长度为128*4字节
	输出:
		pbMP_ByP1: 乘法器输出，P1存储的部分（k1*p1 || p1*d1），长度为64字节
		pbMP_ToP2: 乘法器输出，发送P2的部分（C1 || C1 || C1 || C1），长度为1024字节
	返回：
		0	失败
		1	成功
=======================================================================================================================
*/
S32 ECDSA_DiCo_Sign_Part2_Send(
	U8 *pbMP_ByP1,
	U8 *pbMP_ToP2,
	SECP256K1_Sys_Para * pSys_Para,
	U8 *pbBN_e,
	U8 *pbBN_r,
	U8 *pbBN_x1,
	U8 *pbBN_k1,
	U8 *pbBN_p1,
	U8 *pbMultPK,
	U8 *pbRand
	);

/*
=======================================================================================================================
	描述:ECDSA两方协同签名――签名算法第二部分（乘法器运算）
	输入:
		pSys_Para: 系统参数
		pbBN_e:  待签名的杂凑值，长度为32字节
		pbBN_r： 共享的临时点x坐标，长度为32字节
		pbBN_x2：P2的部分私钥，长度为32字节
		pbBN_k2：P2的随机数k2，长度为32字节
		pbBN_p2：P2的随机数p2，长度为32字节
		pbMultPK: 乘法器公钥，长度128字节
		pbMP_ToP2: 乘法器输出，发送P2的部分（C1 || C1 || C1 || C1），长度为1024字节
		pbRand： 计算所需的随机数，长度为160*4字节
	输出:
		pbMP_ToP1: 乘法器输出，发送P1的部分（C2 || C2 || C2 || C2），长度为1024字节
		pbBN_alpha2: 乘法器的结果c2 = k2*p2 + c21，长度为64字节
		pbBN_beta2: 乘法器的结果beta2 = deta2*p2 + beta21，长度为64字节
	返回：
		0	失败
		1	成功
=======================================================================================================================
*/
S32 ECDSA_DiCo_Sign_Part2_Mult(
	U8 *pbMP_ToP1,
	U8 *pbBN_alpha2,
	U8 *pbBN_beta2,
	SECP256K1_Sys_Para * pSys_Para,
	U8 *pbBN_e,
	U8 *pbBN_r,
	U8 *pbBN_x2,
	U8 *pbBN_k2,
	U8 *pbBN_p2,
	U8 *pbMultPK,
	U8 *pbMP_ToP2,
	U8 *pbRand
	);

/*
=======================================================================================================================
	描述:ECDSA两方协同签名――签名算法第二部分（乘法器响应）
	输入:
		pSys_Para: 系统参数
		pbMultSK: 乘法器私钥，长度384字节
		pbMP_ByP1: 乘法器输出，P1存储的部分（k1*p1 || p1*d1），长度为64字节
		pbMP_ToP1: 乘法器输出，发送P1的部分（C2 || C2 || C2 || C2），长度为1024字节
	输出:
		pbBN_alpha1: 乘法器的结果c1 = k1*p1 + c12，长度为64字节
		pbBN_beta1: 乘法器的结果beta1 = deta1*p1 + beta12，长度为64字节
	返回：
		0	失败
		1	成功
=======================================================================================================================
*/
S32 ECDSA_DiCo_Sign_Part2_Recv(
	U8 *pbBN_alpha1,
	U8 *pbBN_beta1,
	SECP256K1_Sys_Para * pSys_Para,
	U8 *pbMultSK,
	U8 *pbMP_ByP1,
	U8 *pbMP_ToP1
	);

/*
=======================================================================================================================
	描述:ECDSA两方协同签名――签名算法――第六步
	输入:
		pSys_Para: 系统参数
		pbBN_alpha1: 乘法器的结果c1 = k1*p1 + c12，长度为64字节
		pbBN_beta1: 乘法器的结果beta1 = deta1*p1 + beta12，长度为64字节
		pbBN_alpha2: 乘法器的结果c2 = k2*p2 + c21，长度为64字节
		pbBN_beta2: 乘法器的结果beta2 = deta2*p2 + beta21，长度为64字节
	输出:
		pbBN_s: 签名值第二部分s，长度为32字节

	返回：
		0	失败
		1	成功
=======================================================================================================================
*/
S32 ECDSA_DiCo_Sign_Part2_GetS(
		U8 *pbBN_s,
		SECP256K1_Sys_Para * pSys_Para, 
		U8 *pbBN_alpha1,
		U8 *pbBN_beta1,
		U8 *pbBN_alpha2,
		U8 *pbBN_beta2
		);

/*
=======================================================================================================================
	描述:ECDSA两方协同签名――验签算法
	输入:
		pbHash:杂凑值，即待验签数据的杂凑值,长度为32字节
		pbPubKey:公钥，即验签所用的公钥,长度为64字节
		pbSign:签名值,即待验证的签名值(r,s)，长度为64字节
		pSys_Para: 系统参数
	输出:
		无
	返回：
		0	失败
		1	成功
=======================================================================================================================
*/
S32 ECDSA_DiCo_Verify(SECP256K1_Sys_Para * pSys_Para, U8 *pbHash, U8 *pbPubKey, U8 *pbSign);


#ifdef  __cplusplus
}
#endif


#endif // !__HEADER_ECDSA_DI_CO_H__
